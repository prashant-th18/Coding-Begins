#### [C &mdash; Make Graph
](https://codeforces.com/group/Mka6Tznt4j/contest/370099/problem/C)
Idea: [user:prashant_th18,2022-02-25]

<spoiler summary ="Hint1">
There's only one case when answer doesn't exist
</spoiler>

<spoiler summary="Tutorial">
Since we can't have multiple edges or self-loops, for $k = 1$, answer doesn't exist. But for all other values of $k$, answer exists. Let's try to construct the graph.


Suppose $2$ $\leq$ $k$, then if we think for a while, we can see that required graph is possible if we create a graph of nodes $= k + 1$ and connect each node with every other node once.

In such a case, number of edges $=$ $k * (k + 1) / 2$, and this graph will surely contain a cycle of length $= 3$.

Since for making the graph, we have have to create $k * (k + 1) / 2$ edges, we have to do nearly $k^2$ operations, therefore,

Time Complexity: _$O(k^2)$_.
</spoiler>


<spoiler summary="Solution ">
~~~~~
#include <bits/stdc++.h>

using namespace std;
typedef long long ll;
#define sz(x) ((int)x.size())
#define ff first
#define ss second
#define all(x) begin(x), end(x)
const int MOD = 1e9 + 7

int32_t main() {
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int test = 1;
    //cin >> test;
    for(int t_ = 0; t_ < test; t_++)
    {
        int k; cin >> k;
        if(k == 1)
        {
            cout << "NO"; return 0;
        }
        int nodes = k + 1;
        vector<pair<int, int>> ans;
        for(int i = 1; i <= nodes - 1; ++i)
        {
            for(int j = i + 1; j <= nodes; ++j)
            {
                ans.push_back({i, j});
            }
        }
        cout << "yES\n";
        cout << nodes << ' ' << sz(ans) << '\n';
        for(auto [x, y] : ans)
        {   
            cout << x << ' ' << y << '\n';
        }
        cout << '\n';	
    }
    return 0;
}
~~~~~
</spoiler>
